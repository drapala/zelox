name: PR Quality Gate

# ============================================================================
# PURPOSE: Enforce LLM-First architecture standards on every Pull Request
# 
# This CI pipeline ensures code changes follow principles that maximize
# AI agent effectiveness, including:
# - Small PR sizes (‚â§500 LOC, ‚â§10 files) for focused changes
# - Vertical Slice Architecture (VSA) with co-located tests
# - Comprehensive documentation and metadata
# - Sequential ADR numbering for decision tracking
# ============================================================================

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  pull-requests: write

jobs:
  pr-gate:
    name: LLM-First Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Need more history for proper diff analysis
        fetch-depth: 0
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit ruff pyyaml jsonschema black==24.10.0 bandit mypy types-PyYAML types-requests
    
    - name: Pre-commit checks (all files)
      # WHAT: Runs all pre-commit hooks on the entire codebase
      # WHY: Ensures consistent code quality and documentation standards
      # HOW: Executes hooks defined in .pre-commit-config.yaml:
      #   - Black: Enforces consistent Python formatting
      #   - Bandit: Security linting for Python
      #   - MyPy: Static type checking
      #   - Ruff: Additional linting and code quality checks
      #   - README coverage: Ensures features have documentation
      #   - Frontmatter coverage: Validates Python file metadata
      # NOTE: Runs on ALL files for deterministic CI results
      run: |
        echo "üîß Running pre-commit checks..."
        echo "‚Üí Black: Checking code formatting"
        echo "‚Üí Bandit: Checking security issues"
        echo "‚Üí MyPy: Checking type annotations"
        echo "‚Üí Ruff: Checking code quality"
        echo "‚Üí README coverage: Checking feature documentation"
        echo "‚Üí Frontmatter: Checking Python file metadata"
        pre-commit run --all-files --show-diff-on-failure --color always
        
    - name: PR LOC Gate (Categorized Limits)
      # WHAT: Enforces differentiated PR size limits per ADR-003 and ADR-006
      # WHY: Small PRs are easier to review while incentivizing comprehensive testing
      # HOW: Categorizes files and applies different limits per category:
      #   - APPLICATION: ‚â§500 LOC, ‚â§10 files (strict for business logic)
      #   - TEST: ‚â§1000 LOC, ‚â§20 files (generous to encourage testing)
      #   - CONFIG: ‚â§250 LOC, ‚â§5 files (config changes should be minimal)
      #   - DOCUMENTATION: No limits (always encourage docs)
      # TOTAL: ‚â§25 files across all categories (safety net)
      run: |
        echo "üîç Checking categorized PR size limits..."
        echo "‚Üí Application code: max 500 LOC, 10 files"
        echo "‚Üí Test code: max 1000 LOC, 20 files"  
        echo "‚Üí Config/schemas: max 250 LOC, 5 files"
        echo "‚Üí Documentation: no limits (excluded)"
        echo "‚Üí Total files: max 25 (safety net)"
        python3 scripts/check_pr_loc.py origin/main...HEAD
      
    - name: Schema Validation
      # WHAT: Validates YAML/JSON files against their schemas
      # WHY: Ensures configuration files follow expected structure
      # HOW: Uses JSON Schema Draft 7 validation
      # FILES: INDEX.yaml, ADR frontmatter, OBS_PLAN.md files
      run: |
        echo "üìã Validating repository schemas..."
        echo "‚Üí Checking docs/repo/INDEX.yaml structure"
        echo "‚Üí Validating ADR YAML frontmatter"
        echo "‚Üí Verifying OBS_PLAN.md formats"
        python3 scripts/validate_schemas.py
        
    - name: LLM Readiness Check
      # WHAT: Calculates repository's LLM Readiness Score
      # WHY: Measures how well the codebase follows LLM-first principles
      # HOW: Scores based on:
      #   - Co-location (tests with code): 25 points
      #   - Import complexity (avg hops): 20 points  
      #   - Front-matter coverage: 20 points
      #   - Documentation structure: 20 points
      #   - ADR completeness: 10 points
      #   - Feature structure: 5 points
      # THRESHOLD: Must score ‚â•80/100 to pass
      run: |
        echo "ü§ñ Checking LLM readiness score..."
        echo "‚Üí Co-location: Are tests next to code?"
        echo "‚Üí Import complexity: How many hops to understand code?"
        echo "‚Üí Front-matter: Do files have metadata headers?"
        echo "‚Üí Documentation: Are required docs present?"
        echo "‚Üí ADRs: Are architecture decisions documented?"
        echo "‚Üí Features: Do they follow VSA structure?"
        python3 scripts/check_llm_readiness.py
        
    - name: Validate File Structure
      # WHAT: Verifies repository follows LLM-first directory structure
      # WHY: Consistent structure helps LLMs navigate and understand code
      # HOW: Checks for required directories and files per ADR-001
      # STRUCTURE:
      #   - features/: Vertical slices with co-located tests
      #   - docs/repo/: Navigation maps and indexes
      #   - docs/adr/: Architecture decision records
      #   - schemas/: JSON schema definitions
      #   - scripts/: Tooling and automation
      #   - shared/: Cross-cutting concerns
      run: |
        echo "üìÅ Checking LLM-first file structure..."
        echo "‚Üí Verifying directory layout follows VSA principles"
        echo "‚Üí Ensuring navigation files are present"
        
        # Check for required directories
        echo "Checking required directories..."
        for dir in docs/repo docs/adr features shared scripts schemas; do
          if [ ! -d "$dir" ]; then
            echo "‚ùå Missing required directory: $dir"
            exit 1
          fi
        done
        
        # Check for required files
        echo "Checking required files..."
        required_files=(
          "CLAUDE.md"
          "docs/repo/REPO_MAP.md"
          "docs/repo/INDEX.yaml" 
          "docs/repo/FACTS.md"
          "docs/repo/recovery_patterns.yaml"
          "scripts/check_pr_loc.py"
          "scripts/check_llm_readiness.py"
          "scripts/validate_schemas.py"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          fi
        done
        
        echo "‚úÖ File structure validation passed"
        
    - name: ADR Consistency Check
      # WHAT: Ensures Architecture Decision Records are properly maintained
      # WHY: ADRs document critical decisions for both humans and LLMs
      # HOW: Verifies sequential numbering (001, 002, 003...)
      # REQUIREMENT: No gaps in numbering, template at 000
      run: |
        echo "üìÑ Checking ADR consistency..."
        echo "‚Üí Verifying ADRs are numbered sequentially"
        echo "‚Üí Ensuring no gaps in numbering"
        
        # Check that ADRs are numbered sequentially
        python3 -c "
import os, re
from pathlib import Path

adr_dir = Path('docs/adr')
adr_files = sorted([f for f in adr_dir.glob('*.md') if not 'template' in f.name])

numbers = []
for adr_file in adr_files:
    match = re.match(r'(\d+)-', adr_file.name)
    if match:
        numbers.append(int(match.group(1)))

if numbers != list(range(1, len(numbers) + 1)):
    print('‚ùå ADR numbers are not sequential:', numbers)
    exit(1)
    
print(f'‚úÖ ADR numbering is sequential: {len(numbers)} ADRs found')
"
        
    - name: Feature Template Check
      # WHAT: Validates features follow Vertical Slice Architecture
      # WHY: VSA reduces cognitive hops for LLMs by co-locating related code
      # HOW: Checks each feature directory for:
      #   - README.md: Feature documentation
      #   - Implementation files: service.py, models.py, or api.py
      #   - Tests: Co-located test files (warning if missing)
      # NOTE: Template directory is ignored
      run: |
        echo "üì¶ Checking feature template compliance..."
        echo "‚Üí Features should be self-contained vertical slices"
        echo "‚Üí Each feature should have README.md and tests co-located"
        
        # Check if features follow VSA structure
        if [ -d "features" ] && [ "$(find features -mindepth 1 -maxdepth 1 -type d | wc -l)" -gt 0 ]; then
          echo "Found feature directories, checking structure..."
          
          for feature_dir in features/*/; do
            if [ -d "$feature_dir" ]; then
              feature_name=$(basename "$feature_dir")
              
              # Skip template directory
              if [ "$feature_name" = "template" ]; then
                continue
              fi
              
              echo "Checking feature: $feature_name"
              
              # Check for README.md
              if [ ! -f "$feature_dir/README.md" ]; then
                echo "‚ö†Ô∏è  Feature $feature_name missing README.md"
              fi
              
              # Check for at least one of: service.py, models.py, api.py
              if [ ! -f "$feature_dir/service.py" ] && [ ! -f "$feature_dir/models.py" ] && [ ! -f "$feature_dir/api.py" ]; then
                echo "‚ö†Ô∏è  Feature $feature_name has no core implementation files"
              fi
            fi
          done
        else
          echo "‚ÑπÔ∏è  No features found - this is acceptable for new repositories"
        fi
        
        echo "‚úÖ Feature structure check completed"

    - name: Generate PR Summary
      # WHAT: Creates final report of all quality checks
      # WHY: Provides clear feedback on PR compliance
      # HOW: Summarizes file counts, LOC, and gate results
      if: always()
      run: |
        echo "üìä PR Quality Summary"
        echo "===================="
        echo ""
        echo "This PR has been evaluated against LLM-First architecture standards:"
        echo ""
        
        # Get file counts
        total_files=$(git diff --name-only origin/main...HEAD | wc -l)
        code_files=$(python3 -c "
import subprocess
files = subprocess.check_output(['git', 'diff', '--name-only', 'origin/main...HEAD'], text=True).strip().split('\n')
code_files = [f for f in files if not any(f.endswith(ext) for ext in ['.md', '.mdx', '.rst', '.txt']) and f.strip()]
print(len(code_files))
")
        
        echo "Files changed: $total_files (Code: $code_files)"
        
        # Get LOC stats
        python3 scripts/check_pr_loc.py origin/main...HEAD || true
        
        echo ""
        echo "Quality gates passed! ‚úÖ"